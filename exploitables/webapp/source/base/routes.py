from flask import Blueprint, render_template, redirect, request, url_for
from flask_login import (
    current_user,
    LoginManager,
    login_required,
    login_user,
    logout_user
)
from .forms import LoginForm, CreateAccountForm
import os.path
import pickle
import sys
sys.path.append("../")
import Profile
# start the login system
login_manager = LoginManager()

blueprint = Blueprint(
    'base_blueprint',
    __name__,
    url_prefix='',
    template_folder='templates',
    static_folder='static'
)

from database import db
from .models import User


@blueprint.route('/')
def route_default():
    return redirect(url_for('base_blueprint.login'))


@blueprint.route('/profile')
@login_required
def render_profile():
    profile_parameter = '/tmp/profile.pickle'
    profile_param = request.args.get('profile')
    if profile_param is not None:            
        profile_parameter = profile_param
    if os.path.isfile(profile_parameter):
        with open(profile_parameter, "rb") as pickle_fd:
            p = pickle.load(pickle_fd)
            fName = p.first
            lName = p.last
            dob = p.dob
            password = p.password
            phone = p.phonenum
            address = p.address
            return render_template('profile_populated.html', fName=fName,lName=lName,dob=dob,password=password,phone=phone,address=address)
    else:
        return render_template('profile.html')

@blueprint.route('/save_profile', methods=['POST'])
@login_required
def save_profile():
    first_name = request.form['fName']
    last_name = request.form['lName']
    date = request.form['date']
    password = request.form['password']
    phone = request.form['phone']
    address = request.form['address']
    profile_to_write = Profile.Profile(first_name, last_name, date, password, phone, address)
    f = open("/tmp/profile.pickle","w")
    pickle.dump(profile_to_write, f)
    return redirect("/profile")

@blueprint.route('/clear_profile')
@login_required
def clear_profile():
    os.remove("/tmp/profile.pickle")
    return redirect("/profile")

@blueprint.route('/upload', methods=['GET', 'POST'])
@login_required
def upload():
    if request.method == 'POST':
        if 'file' not in request.files:
            flash('No file part')
            return redirect(request.url)
        file = request.files['file']
        if file.filename == '':
            flash('No selected file')
            return redirect(request.url)
        if file:
            filename = file.filename
            file.save(os.path.join('/tmp/', filename))
            return redirect(url_for('base_blueprint.route_default'))

@blueprint.route('/<template>')
@login_required
def route_template(template):
    if template != 'save_profile':
        return render_template(template + '.html')
    else:
        return render_template('profile.html')


@blueprint.route('/fixed_<template>')
@login_required
def route_fixed_template(template):
    return render_template('fixed/fixed_{}.html'.format(template))


@blueprint.route('/page_<error>')
def route_errors(error):
    return render_template('errors/page_{}.html'.format(error))

## Login & Registration


@blueprint.route('/login', methods=['GET', 'POST'])
def login():
    login_form = LoginForm(request.form)
    create_account_form = CreateAccountForm(request.form)
    if 'login' in request.form:
        username = str(request.form['username'])
        password = str(request.form['password'])
        user = db.session.query(User).filter_by(username=username).first()
        if user and password == user.password:
            login_user(user)
            return redirect(url_for('base_blueprint.route_default'))
        return render_template('errors/page_403.html')
    elif 'create_account' in request.form:
        login_form = LoginForm(request.form)
        user = User(**request.form)
        db.session.add(user)
        db.session.commit()
        return redirect(url_for('base_blueprint.login'))
    if not current_user.is_authenticated:
        return render_template(
            'login/login.html',
            login_form=login_form,
            create_account_form=create_account_form
        )
    return redirect(url_for('home_blueprint.index'))


@blueprint.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('base_blueprint.login'))

@blueprint.route('/shutdown')
def shutdown():
    func = request.environ.get('werkzeug.server.shutdown')
    if func is None:
        raise RuntimeError('Not running with the Werkzeug Server')
    func()
    return 'Server shutting down...'

## Errors


@login_manager.unauthorized_handler
def unauthorized_handler():
    return render_template('errors/page_403.html'), 403


@blueprint.errorhandler(403)
def access_forbidden(error):
    return render_template('errors/page_403.html'), 403


@blueprint.errorhandler(404)
def not_found_error(error):
    return render_template('errors/page_404.html'), 404


@blueprint.errorhandler(500)
def internal_error(error):
    return render_template('errors/page_500.html'), 500
